<?xml version="1.0"?>

<?xml-stylesheet href="chrome://ezsidebar/content/ezsidebar.css" type="text/css"?>
<?xml-stylesheet href="chrome://ezsidebar/skin/ezsidebar.css" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://ezsidebar/locale/">

<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:ezsidebar="http://white.sakura.ne.jp/~piro/rdf#">

<script type="application/javascript" src="chrome://ezsidebar/content/pImageLoader.js"/>
<script type="application/javascript" src="chrome://ezsidebar/content/prefs.js"/>
<script type="application/javascript" src="chrome://ezsidebar/content/globalOverlay.js"/>
<script type="application/javascript" src="chrome://ezsidebar/content/pRDFData.js"/>

<vbox id="sidebar-box"
	ondraggesture="EzSidebarService.onDragDropEvent('startDrag', event);"
	ondragover="EzSidebarService.onDragDropEvent('dragOver', event);"
	ondragexit="EzSidebarService.onDragDropEvent('dragExit', event);"
	ondragdrop="EzSidebarService.onDragDropEvent('drop', event);"
	contextmenu="sidebar-panel-popup">
	<box id="sidebar-userdeifned-box"
		flex="1"
		orient="vertical"
		collapsed="true">
		<browser id="sidebar-userdefined"
			flex="1"
			type="content"
			contextmenu="contentAreaContextMenu"
			contentcontextmenu="contentAreaContextMenu"
			onclick="return contentAreaClick(event, true);"
			autoscroll="true"
			src="about:blank"/>
	</box>
	<menupopup id="sidebar-panel-popup"
		label="&ezsidebar.menu.label;"
		oncommand="this.hidePopup();"
		onpopupshowing="EzSidebarService.initPopup(this);"
		style="max-width: 24em;"
		ezsidebar-menuType="panels">
		<menuseparator ezsidebar-id="sidebarPanelPopup:separator"
			ezsidebar-inPanelsMenu="true"/>
		<menuitem
			label="&ezsidebar.addNewPanel.label;"
			accesskey="&ezsidebar.addNewPanel.label;"
			oncommand="EzSidebarService.addNewPanel();"
			key="ezsidebar:key:addNewPanel"/>
		<menuitem
			label="&ezsidebar.reload.label;"
			accesskey="&ezsidebar.reload.label;"
			oncommand="EzSidebarService.sidebar.reload();"/>

		<menuseparator ezsidebar-inContextMenu="true"/>
		<menuitem
			label="&ezsidebar.renamePanel.label;"
			accesskey="&ezsidebar.renamePanel.label;"
			oncommand=" EzSidebarService.renameCurrentPanel();"
			observes="ezsidebar:broadcaster:isUserDefined"
			ezsidebar-inContextMenu="true"/>
		<menuitem
			label="&ezsidebar.removePanel.label;"
			accesskey="&ezsidebar.removePanel.label;"
			oncommand=" EzSidebarService.removeCurrentPanel();"
			observes="ezsidebar:broadcaster:isUserDefined"
			ezsidebar-inContextMenu="true"/>
		<menuseparator ezsidebar-inContextMenu="true"/>
		<menuitem
			label="&ezsidebar.setShortcut.label;"
			accesskey="&ezsidebar.setShortcut.label;"
			oncommand="EzSidebarService.setKeyboardShortcutForCurrentPanel();"
			observes="ezsidebar:broadcaster:isUserDefined"
			ezsidebar-inContextMenu="true"/>
		<menuitem
			ezsidebar-id="sidebarPanelPopup:clearKey"
			label="&ezsidebar.clearShortcut.label;"
			accesskey="&ezsidebar.clearShortcut.label;"
			oncommand="EzSidebarService.setKeyboardShortcutForCurrentPanel(true);"
			observes="ezsidebar:broadcaster:isUserDefined"
			ezsidebar-inContextMenu="true"/>

		<menu label="&ezsidebar.edit.label;"
			accesskey="&ezsidebar.edit.label;"
			observes="ezsidebar:broadcaster:isUserDefined"
			ezsidebar-inPanelsMenu="true">
			<menupopup
				oncommand="this.hidePopup();"
				onpopupshowing="event.stopPropagation();"
				onpopuphiding="event.stopPropagation();">
				<menuitem
					label="&ezsidebar.renamePanel.label;"
					accesskey="&ezsidebar.renamePanel.label;"
					oncommand=" EzSidebarService.renameCurrentPanel();"/>
				<menuitem
					label="&ezsidebar.removePanel.label;"
					accesskey="&ezsidebar.removePanel.label;"
					oncommand=" EzSidebarService.removeCurrentPanel();"/>
				<menuseparator/>
				<menuitem
					label="&ezsidebar.setShortcut.label;"
					accesskey="&ezsidebar.setShortcut.label;"
					oncommand="EzSidebarService.setKeyboardShortcutForCurrentPanel();"/>
				<menuitem
					ezsidebar-id="sidebarPanelPopup:clearKey:submenu"
					label="&ezsidebar.clearShortcut.label;"
					accesskey="&ezsidebar.clearShortcut.label;"
					oncommand="EzSidebarService.setKeyboardShortcutForCurrentPanel(true);"/>
			</menupopup>
		</menu>
		<menuseparator/>
		<menuitem ezsidebar-id="sidebarPanelPopup:dock"
			ezsidebar-inSidebarWindow="true"
			label="&ezsidebar.dock.label;"
			oncommand="EzSidebarService.dock(this);"
			class="menuitem-iconic"
			image="chrome://ezsidebar/skin/dock.png"/>
		<menuitem ezsidebar-id="sidebarPanelPopup:undock"
			ezsidebar-inHostWindow="true"
			label="&ezsidebar.undock.label;"
			oncommand="EzSidebarService.undock(this);"
			class="menuitem-iconic"
			image="chrome://ezsidebar/skin/undock.png"/>
		<menuitem ezsidebar-id="sidebarPanelPopup:collapse"
			ezsidebar-inSidebarWindow="true"
			label="&ezsidebar.collapse.label;"
			oncommand="EzSidebarService.collapseExpand();"
			observes="ezsidebar:broadcaster:collapseExpand"/>
		<menuitem ezsidebar-id="sidebarPanelPopup:expand"
			ezsidebar-inSidebarWindow="true"
			label="&ezsidebar.expand.label;"
			oncommand="EzSidebarService.collapseExpand();"
			observes="ezsidebar:broadcaster:collapseExpand"/>
		<menu label="&ezsidebar.functions.label;"
			ezsidebar-inSidebarWindow="true">
			<menupopup
				oncommand="this.hidePopup();"
				onpopupshowing="event.stopPropagation();"
				onpopuphiding="event.stopPropagation();">
				<menuitem label="&ezsidebar.alwaysRaised.label;"
					oncommand="EzSidebarService.setAlwaysRaised(); EzSidebarService.updateSidebarWindowBroadcasters();"
					observes="ezsidebar:broadcaster:alwaysRaised"/>
				<menuitem ezsidebar-id="sidebarPanelPopup:autoCollapse"
					label="&ezsidebar.autoCollapse.label;"
					oncommand="EzSidebarService.setAutoCollapse(); EzSidebarService.updateSidebarWindowBroadcasters();"
					observes="ezsidebar:broadcaster:autoCollapse"/>
				<menuitem ezsidebar-id="sidebarPanelPopup:autoClose"
					label="&ezsidebar.autoClose.label;"
					oncommand="EzSidebarService.setAutoClose(); EzSidebarService.updateSidebarWindowBroadcasters();"
					observes="ezsidebar:broadcaster:autoClose"/>
				<menuitem ezsidebar-id="sidebarPanelPopup:autoMinimize"
					label="&ezsidebar.autoMinimize.label;"
					oncommand="EzSidebarService.setAutoMinimize(); EzSidebarService.updateSidebarWindowBroadcasters();"
					observes="ezsidebar:broadcaster:autoMinimize"/>
				<menuitem ezsidebar-id="sidebarPanelPopup:hideOnStartup"
					label="&ezsidebar.hideOnStartup.label;"
					oncommand="EzSidebarService.setHideOnStartup(); EzSidebarService.updateSidebarWindowBroadcasters();"
					observes="ezsidebar:broadcaster:hideOnStartup"/>
			</menupopup>
		</menu>
	</menupopup>
	<data hidden="true">
		<stack id="template:sidebar-title-stack" flex="1" align="center">
			<hbox id="sidebar-progressmeter-box"
				flex="1" align="center" collapsed="true">
				<progressmeter id="sidebar-progressmeter" flex="1"
					mode="normal" value="0"/>
			</hbox>
			<label id="template:sidebar-title" flex="1" crop="end"/>
		</stack>
		<toolbarbutton hidden="false"
			id="template:sidebar-dock-button"
			tooltiptext="&ezsidebar.dock.label;"
			oncommand="EzSidebarService.dock();"/>
		<toolbarbutton hidden="false"
			id="template:sidebar-undock-button"
			tooltiptext="&ezsidebar.undock.label;"
			oncommand="EzSidebarService.undock();"/>
	</data>
</vbox>

<broadcasterset id="mainBroadcasterSet">
	<broadcasterset id="ezsidebarBroadcasterSet"
		ezsidebar-template="
			function(aData)
			{
				return {
						localName : 'broadcaster',
						attr : {
							uri                   : aData.uri,
							'ezsidebar-generated' : true,
							'ezsidebar-id'        : 'ezsidebar:broadcaster:'+aData.uri,
							label                 : aData.name,
							autoCheck             : false,
							type                  : 'checkbox',
							group                 : 'sidebar',
							sidebarurl            : aData.sidebar,
							image                 : aData.image
						}
					};
			}
			"/>
	<broadcaster id="ezsidebar:broadcaster:isUserDefined"/>
	<broadcaster id="ezsidebar:broadcaster:collapseExpand"/>
	<broadcaster id="ezsidebar:broadcaster:autoCollapse"
		type="checkbox"/>
	<broadcaster id="ezsidebar:broadcaster:autoClose"
		type="checkbox"/>
	<broadcaster id="ezsidebar:broadcaster:autoMinimize"
		type="checkbox"/>
	<broadcaster id="ezsidebar:broadcaster:hideOnStartup"
		type="checkbox"/>
	<broadcaster id="ezsidebar:broadcaster:alwaysRaised"
		type="checkbox"/>
</broadcasterset>

<keyset id="mainKeyset">
	<keyset id="ezsidebarKeySet"
		ezsidebar-template="
			function(aData)
			{
				return (!aData.key &amp;&amp; !aData.keyCode) ?
						{} :
					aData.key ?
						{
							localName : 'key',
							attr : {
								uri                   : aData.uri,
								'ezsidebar-generated' : true,
								'ezsidebar-id'        : 'ezsidebar:key:'+aData.uri,
								'ezsidebar-observes'  : 'ezsidebar:broadcaster:'+aData.uri,
								oncommand             : 'toggleSidebar(this.getAttribute(\'ezsidebar-observes\'));',
								'key'                 : aData.key,
								modifiers             : aData.modifiers
							}
						} :
					aData.keyCode ?
						{
							localName : 'key',
							attr : {
								uri                   : aData.uri,
								'ezsidebar-generated' : true,
								'ezsidebar-id'        : 'ezsidebar:key:'+aData.uri,
								'ezsidebar-observes'  : 'ezsidebar:broadcaster:'+aData.uri,
								oncommand             : 'toggleSidebar(this.getAttribute(\'ezsidebar-observes\'));',
								keycode               : aData.keyCode,
								modifiers             : aData.modifiers
							}
						} :
					{};
			}
			"/>
	<key id="ezsidebar:key:toggleSidebar"
		oncommand="toggleSidebar();"
		keycode="VK_F9"/>
	<key id="ezsidebar:key:addNewPanel"
		oncommand="EzSidebarService.addNewPanel();"
		key="&ezsidebar.addNewPanel.key;" modifiers="accel"/>
</keyset>

<menupopup id="viewSidebarMenu"
	ondraggesture="EzSidebarService.onDragDropEvent('startDrag', event);"
	ondragover="EzSidebarService.onDragDropEvent('dragOver', event);"
	ondragexit="EzSidebarService.onDragDropEvent('dragExit', event);"
	ondragdrop="EzSidebarService.onDragDropEvent('drop', event);"
	style="max-width: 24em;">
	<menu hidden="true">
		<menupopup id="ezsidebar:viewSidebarMenu:mpopup"
			ezsidebar-template="
				function(aData, aSelected)
				{
					return {
							localName : 'menuitem',
							attr : {
								uri                   : aData.uri,
								'ezsidebar-item'      : true,
								'ezsidebar-generated' : true,
								'ezsidebar-id'        : 'ezsidebar:broadcaster:'+aData.uri,
								'ezsidebar-observes'  : 'ezsidebar:broadcaster:'+aData.uri,
								'ezsidebar-key'       : 'ezsidebar:key:'+aData.uri,
								oncommand             : 'toggleSidebar(this.getAttribute(\'ezsidebar-observes\'));',
								crop                  : 'end',
								'class'               : 'menuitem-iconic',
								checked               : aSelected
							}
						};
				}
				"/>
		<data>
			<menuseparator ezsidebar-item="true"
				ezsidebar-menubar-item="true"/>
			<menuitem ezsidebar-item="true"
				ezsidebar-menubar-item="true"
				label="&ezsidebar.addNewPanel.label;"
				oncommand="this.parentNode.hidePopup(); EzSidebarService.addNewPanel();"
				key="ezsidebar:key:addNewPanel"/>
			<menuitem ezsidebar-item="true"
				ezsidebar-menubar-item="true"
				ezsidebar-id="ezsidebar:viewSidebarMenu:show"
				label="&ezsidebar.show.label;"
				oncommand="toggleSidebar();"
				key="ezsidebar:key:toggleSidebar"/>
			<menuitem ezsidebar-item="true"
				ezsidebar-menubar-item="true"
				ezsidebar-id="ezsidebar:viewSidebarMenu:hide"
				label="&ezsidebar.hide.label;"
				oncommand="toggleSidebar();"
				key="ezsidebar:key:toggleSidebar"/>
			<menuseparator ezsidebar-item="true"
				ezsidebar-menubar-item="true"/>
			<menuitem ezsidebar-item="true"
				ezsidebar-menubar-item="true"
				ezsidebar-id="ezsidebar:viewSidebarMenu:dock"
				label="&ezsidebar.dock.label;"
				oncommand="EzSidebarService.dock(this);"
				class="menuitem-iconic"
				image="chrome://ezsidebar/skin/dock.png"/>
			<menuitem ezsidebar-item="true"
				ezsidebar-menubar-item="true"
				ezsidebar-id="ezsidebar:viewSidebarMenu:undock"
				label="&ezsidebar.undock.label;"
				oncommand="EzSidebarService.undock(this);"
				class="menuitem-iconic"
				image="chrome://ezsidebar/skin/undock.png"/>
		</data>
	</menu>
</menupopup>

<popup id="contentAreaContextMenu">
	<menuitem id="context-addLinkSidebarPanel"
		insertafter="context-bookmarkpage"
		label="&ezsidebar.addLinkPanel.label;"
		accesskey="&ezsidebar.addLinkPanel.accesskey;"
		oncommand="EzSidebarService.addPanel(('getLinkURI' in gContextMenu ? gContextMenu.linkURI : gContextMenu.linkURL() ), EzSidebarService.getInnerTextOf(gContextMenu.link));"/>
	<menuitem id="context-addSidebarPanel"
		insertafter="context-bookmarkpage"
		label="&ezsidebar.addPanel.label;"
		accesskey="&ezsidebar.addPanel.accesskey;"
		oncommand="
			var doc = gContextMenu.target.ownerDocument;
			EzSidebarService.addPanel(doc.URL, doc.title);
		"/>
</popup>


<popupset id="mainPopupSet">
	<menupopup id="ezsidebar-toggle-button:contextmenu"
		position="after_start"
		context=""
		tooltip=""
		tooltiptext=""
		oncommand="this.hidePopup(); this.shown = false;"
		onpopupshowing="EzSidebarService.initPopup(this, 'panels');"
		style="max-width: 24em;"
		ezsidebar-menuType="panelsmenu">
		<menuseparator hidden="true"
			ezsidebar-id="sidebarPanelPopup:separator"
			ezsidebar-inPanelsMenu="true"/>
	</menupopup>
</popupset>

<toolbarpalette id="BrowserToolbarPalette">
	<toolbarbutton id="ezsidebar-toggle-button"
		label="&ezsidebar.toggleShowHide.label;"
		tooltip=""
		tooltiptext="&ezsidebar.toggleShowHide.label;"
		oncommand="toggleSidebar();"
		ondraggesture="EzSidebarService.onDragDropEvent('startDrag', event);"
		ondragover="EzSidebarService.onDragDropEvent('dragOver', event);"
		ondragexit="EzSidebarService.onDragDropEvent('dragExit', event);"
		ondragdrop="EzSidebarService.onDragDropEvent('drop', event);"
		class="toolbarbutton-1"
		type="menu-button"
		context="ezsidebar-toggle-button:contextmenu">
		<menupopup id="ezsidebar-toggle-button:drowdownmenu"
			position="after_start"
			context=""
			tooltip=""
			tooltiptext=""
			oncommand="this.hidePopup(); event.stopPropagation();"
			onpopupshowing="EzSidebarService.initPopup(this);"
			style="max-width: 24em;"
			ezsidebar-menuType="panelsmenu">
			<menuseparator hidden="true"
				ezsidebar-id="sidebarPanelPopup:separator"
				ezsidebar-inPanelsMenu="true"/>
		</menupopup>
	</toolbarbutton>
</toolbarpalette>


</overlay>
